{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","utils/getUser.ts","utils/getTodos.ts","App.tsx","utils/addTodo.ts","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","className","href","TodoInfo","string","user","slice","toUpperCase","TodoList","React","memo","todosFromServer","map","todo","classNames","getUser","users","find","getTodos","currTodos","usersFromServer","pattern","App","useState","setTitle","selectedUserId","setSelectedUserId","todos","setTodos","showErrorTitle","setShowErrorTitle","showErrorUser","setShowErrorUser","handleChange","func","event","value","target","lastIndex","length","test","handleSubmit","preventDefault","trim","maxCurrTodoId","i","Math","max","todoId","titleTodo","addTodo","Number","action","method","onSubmit","type","placeholder","onChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a18456dc.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","type Props = {\n  email: string;\n  name: string;\n};\n\nexport const UserInfo: React.FC<Props> = ({ name, email }) => (\n  <a className=\"UserInfo\" href={email}>\n    { name }\n  </a>\n);\n","import React from 'react';\nimport { User } from '../../types/User';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  title: string;\n  user: User | null;\n};\n\nfunction capitalized(string: string): string {\n  return string.slice(0, 1).toUpperCase() + string.slice(1);\n}\n\nexport const TodoInfo: React.FC<Props> = ({ title, user }) => (\n  <>\n    <h2 className=\"TodoInfo__title\">\n      { capitalized(title) }\n    </h2>\n\n    {user\n      && <UserInfo {...user} />}\n  </>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todosFromServer: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({ todosFromServer = [] }) => (\n    <ul className=\"TodoList\">\n      {todosFromServer.map((todo) => (\n        <li\n          className={classNames(\n            'TodoInfo',\n            {\n              'TodoInfo--completed': todo.completed,\n            },\n          )}\n          key={todo.id}\n          data-id={todo.id}\n        >\n          <TodoInfo\n            title={todo.title}\n            user={todo.user}\n          />\n        </li>\n      ))}\n    </ul>\n  ),\n);\n","import { User } from '../types/User';\n\nexport function getUser(users: User[], userId: number): User | null {\n  const foundUser = users.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n","import { TodoFromServer } from '../types/TodoFromServer';\nimport { getUser } from './getUser';\nimport usersFromServer from '../api/users';\n\nexport function getTodos(currTodos: TodoFromServer[]) {\n  return currTodos.map(todo => ({\n    ...todo,\n    user: getUser(usersFromServer, todo.userId),\n  }));\n}\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { TodoFromServer } from './types/TodoFromServer';\nimport { TodoList } from './components/TodoList';\nimport { getTodos } from './utils/getTodos';\nimport { addTodo } from './utils/addTodo';\n\nconst pattern = /[А-ЯёїіA-Z\\d\\s]/i;\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState('0');\n  const [todos, setTodos] = useState(getTodos(todosFromServer));\n  const [showErrorTitle, setShowErrorTitle] = useState(false);\n  const [showErrorUser, setShowErrorUser] = useState(false);\n\n  function handleChange(\n    func: React.Dispatch<React.SetStateAction<string>>,\n    event: React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLSelectElement>,\n  ): void {\n    const { value } = event.target;\n    const lastIndex = value.length - 1;\n\n    if (value.length && pattern.test(value[lastIndex])) {\n      func(value);\n    }\n\n    if (!event.target.value) {\n      func(value);\n    }\n  }\n\n  function handleSubmit(\n    event: React.FormEvent<HTMLFormElement>,\n    currTodos: TodoFromServer[],\n  ) {\n    event.preventDefault();\n\n    if (!title || !title.trim()) {\n      setShowErrorTitle(true);\n    }\n\n    if (selectedUserId === '0') {\n      setShowErrorUser(true);\n    }\n\n    if (!title || selectedUserId === '0' || !title.trim()) {\n      return;\n    }\n\n    let maxCurrTodoId = 1;\n\n    for (let i = 1; i < currTodos.length; i += 1) {\n      maxCurrTodoId = Math.max(currTodos[i].id, currTodos[i - 1].id);\n    }\n\n    setTodos(getTodos(\n      addTodo(\n        Number(selectedUserId),\n        maxCurrTodoId + 1,\n        title,\n        currTodos,\n      ),\n    ));\n\n    setTitle('');\n    setSelectedUserId('0');\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => handleSubmit(\n          event,\n          todos,\n        )}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={(event) => {\n                handleChange(setTitle, event);\n                setShowErrorTitle(false);\n              }}\n            />\n          </label>\n          {showErrorTitle\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n\n            <select\n              data-cy=\"userSelect\"\n              onChange={(event) => {\n                handleChange(setSelectedUserId, event);\n                setShowErrorUser(false);\n              }}\n              value={selectedUserId}\n            >\n              <option\n                value=\"0\"\n                disabled\n              >\n                Choose a user\n              </option>\n\n              {usersFromServer.map((user) => (\n                <option\n                  value={user.id}\n                  key={user.id}\n                >\n                  { user.name }\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {showErrorUser\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todosFromServer={todos} />\n    </div>\n  );\n};\n","import { TodoFromServer } from '../types/TodoFromServer';\n\nexport function addTodo(\n  userId: number,\n  todoId: number,\n  titleTodo: string,\n  todos: TodoFromServer[],\n) {\n  const todo = {\n    id: todoId,\n    title: titleTodo,\n    completed: false,\n    userId,\n  };\n\n  return [...todos, todo] as TodoFromServer[];\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}